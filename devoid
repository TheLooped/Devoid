#!/usr/bin/env bash

# Created by TheLooped
# Description: A post installation script for Void Linux

# Enable strict mode
set -euo pipefail

# Variables
version="0.0.1"

get_deps_complete=false
greet_complete=false

# Helper Functions

# For color
color() {
    case "$1" in
        red)    color_code="\033[1;31m";; # Critical errors
        yellow) color_code="\033[1;33m";; # Urgent warnings
        green)  color_code="\033[1;32m";; # Emphasized success
        blue)   color_code="\033[1;34m";; # Emphasized information
        cyan)   color_code="\033[1;36m";; # Bold headings
        magenta)   color_code="\033[35m";;   # Important notes, highlights
        purple)    color_code="\033[35m";;   # Alternative to magenta
        orange)    color_code="\033[38;5;208m";; # Actions, warnings
        teal)      color_code="\033[38;5;38m";;   # Status updates, progress
        reset) color_code="\033[0m";;
        *)  echo "Invalid color: $1" >&2; return 1;;
    esac

    echo -en "$color_code"
}

# Print message an echo wrapper cuz why not
print_message() {
    echo -e "$1"
}

# Handle Error
handle_error() {
    local script_name=$(basename "$0")
    local line_number=$1
    local error_message=$2
    local exit_code=$?

    print_message "$(color red)Error in ${script_name} at line ${line_number}: ${error_message}$(color reset)" >&2
    if [ -n "$exit_code" ]; then
        print_message "$(color red)Command exited with code ${exit_code}$(color reset)" >&2
    fi

    # Perform cleanup here if necessary

    exit ${exit_code:-1}
}

# Run command as root if available
run() {
  local command="$@"
  # Checks if user is root or not
  if [ $(id -u) -ne 0 ]; then
    # If not root, run command with sudo
    print_message "Running command with sudo..."
    sudo bash -c "${command}" || handle_error $? "Failed to run command with sudo"
  else
    # If root, run command without sudo 
    eval "${command}" || handle_error $? "Failed to run command"
  fi
}

# Check dependencies
check_deps() {
  print_message "$(color teal)\nChecking dependencies...$(color reset)\n"

  missing_packages=()

  # Check for each package
  for pkg in figlet git curl; do
    if ! command -v "${pkg}" >/dev/null 2>&1; then
      missing_packages+=("$pkg")
    fi
  done

  if [ ${#missing_packages[@]} -gt 0 ]; then
    print_message "$(color orange)Installing missing packages: ${missing_packages[*]}$(color reset)"

    # Install packages with error handling
    sudo xbps-install -S -y "${missing_packages[@]}" || handle_error ${LINENO} "Error installing ${missing_packages[*]}"

    # Check installation success
    for pkg in "${missing_packages[@]}"; do
      if ! command -v "${pkg}" >/dev/null 2>&1; then
        handle_error ${LINENO} "Package ${pkg} failed to install correctly"
      fi
    done
  else
    print_message "$(color green)All dependencies are already installed.$(color reset)"
  fi

  get_deps_complete=true

  # Clear screen only if necessary
  if [[ $- = *i* ]]; then  # Check if interactive shell
    clear
  fi
}

# Main Functions

# Greet the user
greet() {
    check_deps  # Call check_deps before clearing the screen

    print_message "$(color cyan)$(figlet -f slant Devoid)$(color reset)"
    print_message "$(color blue)Author:$(color magenta) TheLooped$(color reset)"
    print_message "$(color blue)Version:$(color magenta) ${version}$(color reset)"

    read -rp "$(color green)Press Enter to continue...$(color reset)"

    greet_complete=true

    clear
}

main() {
  greet
}

main "$@"
