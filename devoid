#!/usr/bin/env bash

# Created by TheLooped
# Description: A post installation script for Void Linux

# Enable strict mode
set -euo pipefail

# Variables
version="0.0.1"
get_deps_complete=false
greet_complete=false
setup_mirrors_complete=false
setup_network_complete=false
setup_xorg_complete=false
setup_drivers_complete=false
setup_audio_complete=false
setup_bluetooth_complete=false
setup_input_complete=false
setup_utils_complete=false
setup_services_complete=false


# Color codes
color() {
    case "$1" in
        red) color_code="\033[1;91m";; # Errors or Warnings
        yellow) color_code="\033[1;93m";; # Pending actions
        green) color_code="\033[1;92m";; # Successful completion
        blue) color_code="\033[1;94m";; # Section headings
        cyan) color_code="\033[38;2;0;255;255m";; # Informational messages
        magenta) color_code="\033[38;5;207m";; # Program-specific messages (More vibrant magenta)
        purple) color_code="\033[38;5;141m";; # Prompts (Pastel purple)
        orange) color_code="\033[38;5;216m";; # Labels for data elements (More vibrant orange)
        lavender) color_code="\033[38;2;255;160;255m";; # Alt Informational messages
        reset) color_code="\033[0m";; # Reset to default text color
        *) echo "Invalid color: $1" >&2; return 1;;
    esac
    echo -en "$color_code"
}

# Print message
print_message() {
    echo -e "$1"
}

# Handle Error
handle_error() {
    local script_name=$(basename "$0")
    local line_number=$1
    local error_message=$2
    local exit_code=${3:-$?}

    print_message "$(color red)Error in ${script_name} at line ${line_number}: ${error_message}$(color reset)" >&2
    if [ -n "$exit_code" ]; then
        print_message "$(color red)Command exited with code ${exit_code}$(color reset)" >&2
    fi
    #exit ${exit_code:-1}
    return ${exit_code:-1}
    main "$@"
}

# Run command as root if available
run() {
    local command="$@"
    # Checks if user is root or not
    if [ $(id -u) -ne 0 ]; then
        # If not root, run command with sudo
        print_message "$(color cyan)Running command with sudo...$(color reset)"
        sudo bash -c "${command}" || handle_error $? "Failed to run command with sudo"
    else
        # If root, run command without sudo 
        eval "${command}" || handle_error $? "Failed to run command"
    fi
}

install() {
    # Synchronize repositories
    print_message "$(color cyan)Synchronizing repositories...$(color reset)"
    run xbps-install -S -u || handle_error $? "Failed to synchronize repositories"

    # Install packages
    for pkg in "$@"; do
        # Check if package is already installed
        if xbps-query -s "$pkg" >/dev/null 2>&1; then
            print_message "$(color lavender)$pkg is already installed.$(color reset)"
        else
            # Package is not installed, proceed with installation
            print_message "$(color cyan)Installing $pkg...$(color reset)"
            # Install package with sudo because password was already given
            sudo xbps-install -y "$pkg" || handle_error $? "Failed to install $pkg"
            print_message "$(color green)$pkg installed successfully.$(color reset)"
        fi
    done
}

update_system() {
    local log_file="/tmp/update_log.txt"

    print_message "$(color cyan)Checking system update status...$(color reset)"

    # Check if the log file exists and is not empty
    if [ ! -f "$log_file" ] || [ ! -s "$log_file" ]; then
        # Log file does not exist or is empty, so we should update the system
        print_message "$(color cyan)Updating system...$(color reset)"

        # Run xbps-install with verbose output and log the output to a file
        run xbps-install -Suvy &> "$log_file" || handle_error $? "Failed to update system"
        print_message "$(color green)System updated successfully.$(color reset)"
    else
        print_message "$(color lavender)System is already up to date.$(color reset)"
    fi

    clear
}


# Check dependencies
check_deps() {
    print_message "$(color cyan)\nChecking dependencies...$(color reset)\n"
    missing_packages=()
    # Check for each package
    for pkg in figlet git curl; do
        if ! command -v "${pkg}" >/dev/null 2>&1; then
            missing_packages+=("$pkg")
        fi
    done
    if [ ${#missing_packages[@]} -gt 0 ]; then
        print_message "$(color lavender)Installing missing packages: ${missing_packages[*]}$(color reset)"
        # Install packages with error handling
        sudo xbps-install -S -y "${missing_packages[@]}" || handle_error ${LINENO} "Error installing ${missing_packages[*]}"
        # Check installation success
        for pkg in "${missing_packages[@]}"; do
            if ! command -v "${pkg}" >/dev/null 2>&1; then
                handle_error ${LINENO} "Package: ${pkg} failed to install correctly"
            fi
        done
    else
        print_message "$(color green)All dependencies are already installed.$(color reset)"
    fi
    get_deps_complete=true
    # Clear screen only if necessary
    if [[ $- = *i* ]]; then # Check if interactive shell
        clear
    fi
}

# Proceed with user confirmation
proceed() {
    local func_name="$1"
    local confirm_msg="$2"
    # Set alias
    local function="${func_name}"
    while true; do
        # Print confirmation message
        print_message "$(color cyan)$confirm_msg [Y/n]$(color reset)"
        # Read input
        read -r ans
        case "$ans" in
            [Yy]*)
                # Call function on yes
                "$function"
                break
                ;;
            [Nn]*)
                # Print skip message and break on no
                print_message "$(color lavender)Skipping $function...$(color reset)"
                break
                ;;
            *)
                # Invalid input error
                print_message "$(color red)Invalid input. Please enter Y or N$(color reset)"
                ;;
        esac
    done
}

# Functions
setup_mirrors() {

  print_message "$(color cyan)Setting up mirrors\\n$(color reset)"

  if [ ! -d /etc/xbps.d ]; then
    print_message "$(color lavender)Creating /etc/xbps.d directory$(color reset)"  
    run mkdir -p /etc/xbps.d
  fi

  if [ ! -f /etc/xbps.d/main.conf ]; then
    print_message "$(color lavender)Copying main.conf to /etc/xbps.d$(color reset)"
    run cp ./res/repo/main.conf /etc/xbps.d/ || handle_error $? "Failed to copy main.conf"
  fi

  print_message "$(color green)Mirrors configured$(color reset)"

  print_message "$(color cyan)Installing repositories$(color reset)"

  run xbps-install -Suvy void-repo-nonfree void-repo-multilib-nonfree || handle_error $? "Repo install failed"

  print_message "$(color green)Repositories installed$(color reset)"

  setup_mirrors_complete=true

  clear
}

# Setup network
setup_network() {

  print_message "$(color cyan)Setting up network$(color reset)"

  # Install network packages
  run xbps-install -S NetworkManager iwd

  # Configure iwd
  if [ ! -d /etc/iwd ]; then
    print_message "$(color lavender)Creating /etc/iwd directory$(color reset)"
    run mkdir -p /etc/iwd
  fi

  if [ ! -f /etc/iwd/main.conf ]; then 
    print_message "$(color lavender)Adding main.conf to /etc/iwd$(color reset)"
    run cp ./res/iwd/main.conf /etc/iwd || handle_error $? "Failed to copy iwd main.conf"
  fi

  # Configure NetworkManager
  if [ ! -d /etc/NetworkManager/conf.d ]; then
    print_message "$(color lavender)Creating /etc/NetworkManager/conf.d directory$(color reset)" 
    run mkdir -p /etc/NetworkManager/conf.d
  fi

  if [ ! -f /etc/NetworkManager/conf.d/nm.conf ]; then
    print_message "$(color lavender)Adding nm.conf to /etc/NetworkManager/conf.d$(color reset)"
    run cp ./res/NetworkManager/nm.conf /etc/NetworkManager/conf.d || handle_error $? "Failed to copy NetworkManager nm.conf" 
  fi

  print_message "$(color green)Network configuration complete$(color reset)"

  setup_network_complete=true

  clear
}

# Setup Xorg
setup_xorg() {
    print_message "$(color cyan)Setting up Xorg$(color reset)"

    local xpkgs=(
        fontconfig-devel
        freetype-devel
        libX11-devel
        libXext-devel
        libXft-devel 
        libXinerama-devel
        libxcb-devel
        setxkbmap
        xauth
        xcb-proto
        xcb-util-cursor-devel
        xcb-util-devel
        xcb-util-keysyms-devel
        xcb-util-wm-devel
        xclip
        xclipboard
        xev
        xf86-input-evdev
        xf86-video-intel
        xgamma
        xinit
        xinput
        xorg-fonts
        xorg-minimal
        xprop
        xrandr
        xsel
        xset
        xsetroot
        xwininfo
    )

    # Install Xorg packages
    install "${xpkgs[@]}"

    print_message "$(color green)Xorg setup complete$(color reset)"

    setup_xorg_complete=true

    clear
}

setup_drivers() {
    print_message "$(color cyan)Setting up drivers\n$(color reset)"

    read -rp "Which driver do you want to use? (amd/intel): " driver
    local ipkgs=(
    linux-firmware-intel
    mesa-dri
    vulkan-loader
    mesa-vulkan-intel
    intel-video-accel
    intel-ucode
    intel-media-driver
    )
    local apkgs=(
    vulkan-loader
    linux-firmware-amd
    mesa-dri
    mesa-vulkan-radeon
    amdvlk
    xf86-video-amdgpu
    xf86-video-ati
    mesa-vaapi
    mesa-vdpau
    )

    if [ "$driver" = "amd" ]; then
        install "${apkgs[@]}"
    elif [ "$driver" = "intel" ]; then
        install "${ipkgs[@]}"
    fi

    print_message "$(color green)Drivers setup complete$(color reset)"

    setup_drivers_complete=true

    clear
}
 
# audio
setup_audio(){

    print_message "$(color cyan)Setting up audio$(color reset)"

    local apkgs=(pipewire alsa-pipewire wireplumber pipewire-devel)

    install "${apkgs[@]}"

    if [ ! -d /etc/pipewire/pipewire.conf.d ]; then
        print_message "$(color lavender)Creating /etc/pipewire/pipewire.conf.d directory$(color reset)"
        run mkdir -p /etc/pipewire/pipewire.conf.d
    fi
    if [ ! -f /etc/pipewire/pipewire.conf.d/10-wireplumber.conf ]; then
        print_message "$(color lavender)Copying pipewire and wireplumber configs$(color reset)"
        run ln -s /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/
        run ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/
    else
        print_message "$(color green)Pipewire and wireplumber configs already exist$(color reset)"
    fi

    if [ ! -d /etc/alsa/conf.d ]; then
        print_message "$(color lavender)Creating /etc/alsa/conf.d directory$(color reset)"
        run mkdir -p /etc/alsa/conf.d
    fi
    if [ ! -f /etc/alsa/conf.d/50-pipewire.conf ]; then
        print_message "$(color lavender)Copying alsa configs$(color reset)"
        run ln -s /usr/share/alsa/alsa.conf.d/50-pipewire.conf /etc/alsa/conf.d
        run ln -s /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d
    else
        print_message "$(color cyan)Alsa configs already exist$(color reset)"
    fi

    print_message "$(color green)Audio setup complete$(color reset)"

    setup_audio_complete=true

    clear
}

setup_bluetooth() {
    print_message "$(color cyan)Setting up bluetooth\n$(color reset)"

    local bpkgs=(bluez libspa-bluetooth)

    install "${bpkgs[@]}"

    if [ ! -d /etc/bluetooth ]; then
        print_message "$(color lavender)Creating /etc/bluetooth directory$(color reset)"
        run mkdir -p /etc/bluetooth
    fi
    if [ ! -f /etc/bluetooth/main.conf ]; then
        print_message "$(color lavender)Copying bluetooth main.conf$(color reset)"
        run cp ./res/bluetooth/main.conf /etc/bluetooth
    fi

    print_message "$(color green)Bluetooth setup complete$(color reset)"

    setup_bluetooth_complete=true
    clear
}

setup_input(){
    print_message "$(color cyan)Setting up input\n$(color reset)"
    local ipkgs=(libinput xf86-input-evdev libinput-devel xf86-input-evdev-devel xf86-input-libinput-devel)

    install "${ipkgs[@]}"

    if [ ! -d /etc/X11/xorg.conf.d ]; then
        print_message "$(color lavender)Creating /etc/X11/xorg.conf.d directory$(color reset)"
        run mkdir -p /etc/X11/xorg.conf.d
    fi
    if [ ! -f /etc/X11/xorg.conf.d/30-touchpad.conf ]; then
        print_message "$(color lavender)Copying touchpad config$(color reset)"
        run cp ./res/X11/30-touchpad.conf /etc/X11/xorg.conf.d
    fi

    print_message "$(color green)Input setup complete$(color reset)"

    setup_input_complete=true
    clear
}

setup_vpkgs(){
    print_message "$(color cyan)Setting up void repo\n$(color reset)"

    dr=$(pwd)

    print_message "$(color lavender)Cloning void repo...$(color reset)"

    git clone https://github.com/void-linux/void-packages.git --depth=1 ~/pkgs

    print_message "$(color lavender)Moving pkgs to ~/.local$(color reset)"
    mv ~/pkgs ~/.local/

    print_message "$(color lavender)Setting up void repo...$(color reset)"
    cd ~/.local/pkgs

    ./xbps-src binary-bootstrap
    echo "XBPS_ALLOW_RESTRICTED=yes" >> $HOME/.local/pkgs/etc/conf

    cd "$dr"

    print_message "$(color green)void repo setup completed!$(color reset)"
    clear
}

setup_shell() {
    print_message "$(color cyan)Setting up shell\n$(color reset)"

    local spkgs=(zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search)

    install "${spkgs[@]}"

    print_message "$(color lavender)Setting zsh as default shell$(color reset)"
    run usermod -s /usr/bin/zsh "$USER"

    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        print_message "$(color lavender)Installing oh-my-zsh$(color reset)"
        curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh
    fi

    print_message "$(color green)Shell installed$(color reset)"
    clear
}

setup_dotfiles() {

    print_message "$(color cyan)Setting up dotfiles\n$(color reset)"

    read -rp "$(color magenta)Do you want to install the dotfiles? (y/n): " choice
    if [ "$choice" = "y" ]; then
        install_dotfiles
    else
        print_message "$(color lavender)Skipping dotfiles setup$(color reset)"
    fi

    clear
}

install_dotfiles() {

    print_message "$(color lavender)Installing dotfiles$(color reset)"

    read -rp "$(color cyan)Enter dotfiles repository URL - example: https://github.com/username/dotfiles: " repo_url

    print_message "$(color lavender)Cloning dotfiles into ~/.dotfiles $(color reset)"

    git clone "$repo_url" ~/.dotfiles || handle_error ${LINENO} "Error cloning dotfiles"

    print_message "$(color green)Dotfiles retrieved"
}

setup_utils() {

    print_message "$(color cyan)Setting up utils\n$(color reset)"

    proceed setup_vpkgs "Setup void repo?"
    proceed setup_dotfiles "Setup dotfiles?"

    setup_utils_complete=true
    clear
}

setup_services() {
  local svs=(NetworkManager acpid bluetoothd dbus elogind iwd polkitd sddm sshd tlp)

  print_message "$(color cyan)Enabling services ${svs[*]}...$(color reset)"

  # Iterate over services, handling existing links and enabling/restarting
  for svc in "${svs[@]}"; do
    local target="/etc/sv/$svc"
    local link="/var/service/$svc"

    # Check if target service exists
    if [ ! -e "$target" ]; then
      handle_error 0 "Service '$svc' not found in /etc/sv!"
      continue
    fi

    # Check existing link and handle conflicts
    if [ -L "$link" ]; then
      local existing_target=$(readlink "$link")
      if [ "$target" != "$existing_target" ]; then
        print_message "$(color yellow)Link '$link' already exists, pointing to '$existing_target'. Skipping '$svc'.$(color reset)"
        continue
      fi
    fi

    # Create symbolic link (if needed) and handle errors
    if [ ! -L "$link" ]; then
      print_message "$(color cyan)Creating symbolic link for service: $svc$(color reset)"
      run ln -s "$target" "$link" || handle_error $? "Failed to create symbolic link for '$svc'"
    fi

    # Enable or restart the service using sv
    print_message "$(color cyan)Enabling service: $svc$(color reset)"
    run sv enable "$svc" || handle_error $? "Failed to enable service '$svc'"
  done

  print_message "$(color green)Services enabled successfully.$(color reset)"
}

# Menu
menu() {
    # Border
    print_message "$(color purple)========= Devoid Installer ========= $(color reset)"
    # List menu items and status
    print_message "$(color orange)1. Install Dependencies$(color reset) - $(check_status get_deps_complete)"
    print_message "$(color orange)2. Setup Mirrors$(color reset)        - $(check_status setup_mirrors_complete)"
    print_message "$(color orange)3. Setup Network$(color reset)        - $(check_status setup_network_complete)"
    print_message "$(color orange)4. Setup Xorg$(color reset)           - $(check_status setup_xorg_complete) "
    print_message "$(color orange)5. Setup Drivers$(color reset)        - $(check_status setup_drivers_complete)"
    print_message "$(color orange)6. Setup Audio$(color reset)          - $(check_status setup_audio_complete)"
    print_message "$(color orange)7. Setup Bluetooth$(color reset)      - $(check_status setup_bluetooth_complete)"
    print_message "$(color orange)8. Setup Input$(color reset)          - $(check_status setup_input_complete)"
    print_message "$(color orange)9. Setup Utils$(color reset)          - $(check_status setup_utils_complete)"
    print_message "$(color orange)10. Setup Services$(color reset)      - $(check_status setup_services_complete)"
    print_message "$(color orange)Q. Quit$(color reset)"
    # Border
    print_message "$(color purple)====================================$(color reset)"
}

# Check completion status
check_status() {
    if [ "${!1}" == "true" ]; then
        echo "$(color green)Completed$(color reset)"
    else
        echo "$(color yellow)Pending$(color reset)" 
    fi
}

# Main Functions

# Greet the user
greet() {
    check_deps # Call check_deps before clearing the screen
    clear

    print_message "$(color cyan)$(figlet -f slant Devoid)$(color reset)"
    print_message "$(color blue)Author:$(color magenta) TheLooped$(color reset)"
    print_message "$(color blue)Version:$(color magenta) ${version}$(color reset)"
    print_message "$(color blue)Description:$(color magenta) A post installation script for Void Linux$(color reset)"
    read -rp "$(color green)Press Enter to continue...$(color reset)"
    greet_complete=true

    update_system

    clear
}



# Main

main() {
    greet
    while true; do
        menu
        read -rp "$(color magenta) Enter your choice: " choice
        case "$choice" in
            1)
                proceed check_deps "Install Dependencies?"
                ;;
            2)
                proceed setup_mirrors "Setup Mirrors?"
                ;;
            3)
                proceed setup_network "Setup Network?"
                ;;
            4)
                proceed setup_xorg "Setup Xorg?"
                ;;
            5)
                proceed setup_drivers "Setup Drivers?"
                ;;
            6)
                proceed setup_audio "Setup Audio?"
                ;;
            7)
                proceed setup_bluetooth "Setup Bluetooth?"
                ;;
            8)
                proceed setup_input "Setup Input?"
                ;;
            9)
                proceed setup_utils "Setup Utils?"
                ;;
            10)
                proceed setup_services "Setup Services?"
                ;;
            [Qq])
                print_message "$(color cyan)Exiting...$(color reset)"
                print_message "$(color cyan)Bye Bye!$(color reset)"
                exit 0
                ;;
            *)
                print_message "$(color red)Invalid choice. Please enter a valid option.$(color reset)"
                ;;
        esac
    done
}

main "$@"
